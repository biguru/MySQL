<?xml version="1.0" encoding="UTF-8"?>
<section id="sql.transactional">
	<title>事务处理和锁定语句</title>
	<subtitle>Transactional and Locking Statements</subtitle>
	<para>开始事务 begin、start transaction 或者 set autocommit=0</para>
	<screen>
事务的特征：原子性（Atomiocity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），这四个特性简称ACID特性。
    原子性：事务是数据库的逻辑工作单位，事务中包括的所有操作要么都做，要么都不做。
    一致性：事务执行的结果必须是使数据库从一个一致性的状态变到另外一个一致性状态。
    隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他事务是隔离的，并发执行的各个事务之间互相不干扰。
    持久性：一个事务一旦成功提交，对数据库中数据的修改就是持久性的。接下来其他的其他操作或故障不应该对其执行结果有任何影响。
	</screen>
	<para>事务隔离模式</para>
	<screen>
 	1) READ UNCOMMITED
    SELECT的时候允许脏读，即SELECT会读取其他事务修改而还没有提交的数据。

    2)READ COMMITED
    SELECT的时候无法重复读，即同一个事务中两次执行同样的查询语句，若在第一次与第二次查询之间时间段，其他事务又刚好修改了其查询的数据且提交了，则两次读到的数据不一致。

    3) REPEATABLE READ
    SELECT的时候可以重复读，即同一个事务中两次执行同样的查询语句，得到的数据始终都是一致的。实现的原理是，在一个事务对数据行执行读取或写入操作时锁定了这些数据行。
    但是这种方式又引发了幻想读的问题。因为只能锁定读取或写入的行，不能阻止另一个事务插入数据，后期执行同样的查询会产生更多的结果。

    4)SERIALIZABLE
    与可重复读的唯一区别是，默认把普通的SELECT语句改成SELECT …. LOCK IN SHARE MODE。即为查询语句涉及到的数据加上共享琐，阻塞其他事务修改真实数据。
    serializable模式中，事务被强制为依次执行。这是SQL标准建议的默认行为。

  查看InnoDB系统级别的事务隔离级别：mysql> SELECT @@global.tx_isolation;
  查看InnoDB会话级别的事务隔离级别：mysql> SELECT @@tx_isolation;
  修改InnoDB系统级别的事务隔离级别：mysql> set global transaction isolation level read committed;
  修改InnoDB会话级别的事务隔离级别：mysql> set session transaction isolation level read committed;
	</screen>
	<para>锁机制</para>
	<screen>
    1) 共享锁：由读表操作加上的锁，加锁后其他用户只能获取该表或行的共享锁，不能获取排它锁，也就是说只能读不能写
    2) 排它锁：由写表操作加上的锁，加锁后其他用户不能获取该表或行的任何锁，典型是mysql事务中的

    锁的范围:
    行锁: 对某行记录加上锁
    表锁: 对整个表加上锁
	</screen>
	<para>共享锁(share mode), 排他锁(for update) </para>

	<section>
		<title>排他锁</title>
		<para>下面做作一个实验，验证锁的效果</para>
		<para>终端一,首先进入事务状态然后运行下面语句</para>
		<screen>
		<![CDATA[
mysql> begin;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from t1 where id='3' for update;
+----+--------+---------------------+---------------------+
| id | name   | ctime               | mtime               |
+----+--------+---------------------+---------------------+
|  3 | test   | 0000-00-00 00:00:00 | 2013-01-14 13:05:41 |
+----+--------+---------------------+---------------------+
1 row in set (0.00 sec)
		]]>
		</screen>
		<para>终端二, 查询表中数据</para>
		<screen>
		<![CDATA[
mysql> select * from t1;
+----+--------+---------------------+---------------------+
| id | name   | ctime               | mtime               |
+----+--------+---------------------+---------------------+
|  1 | neo    | 0000-00-00 00:00:00 | 2013-01-14 13:00:00 |
|  2 | zen    | 0000-00-00 00:00:00 | 2013-01-14 13:00:43 |
|  3 | test   | 0000-00-00 00:00:00 | 2013-01-14 13:05:41 |
+----+--------+---------------------+---------------------+
3 rows in set (0.00 sec)
		]]>
		</screen>
		<para>增加“for update”查询非锁定记录</para>
		<screen>
		<![CDATA[
mysql> select * from t1 where id=2 for update;
+----+------+---------------------+---------------------+
| id | name | ctime               | mtime               |
+----+------+---------------------+---------------------+
|  2 | zen  | 0000-00-00 00:00:00 | 2013-01-14 13:00:43 |
+----+------+---------------------+---------------------+
1 row in set (0.00 sec)
		]]>
		</screen>
		<para>查询被锁定记录</para>
		<screen>
		<![CDATA[
mysql> select * from t1 where id=3 for update;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
		]]>
		</screen>
		<para>查询所有记录，因为记录中包含了id=3那条，所以也不允许查询。</para>
		<screen>
		<![CDATA[
mysql> select * from t1 for update;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
		]]>
		</screen>
		<para>测试修改记录</para>
		<screen>
		<![CDATA[
mysql> UPDATE `t1` SET `name`='testaa' WHERE  `id`=3;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
		]]>
		</screen>
		<tip>
			<para>在没有出现ERROR 1205 (HY000)的这段时间，只要终端一中执行commit,rollback锁就释放了.终端二中的语句就会运行。</para>
			<para>select trx_query from information_schema.innodb_trx; 可以查看被锁的SQL语句</para>
		</tip>
	</section>
	<section>
		<title>表的加锁与解锁</title>
		<screen>
LOCK TABLES tablename WRITE;
LOCK TABLES tablename READ;

...
...

UNLOCK TABLES;
		</screen>
	</section>
	<section>
		<title>事务所用到的表</title>
		<para>information_schema</para>
		<screen>
		<![CDATA[
select * from innodb_trx;
select * from innodb_lock_waits;
select * from innodb_locks;
		]]>
		</screen>
	</section>
</section>